@startuml Hotel Management System - Detailed Architecture
title Hotel Management System - Main UML (Detailed, Left->Right Layout)

' Unified left-to-right layout (mirrors simplified UML)
left to right direction
skinparam ranksep 40
skinparam nodesep 30

' Global styling aligned with simplified diagram
skinparam backgroundColor #FFFFFF
skinparam shadowing true
skinparam roundCorner 14
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam defaultFontSize 12
skinparam ArrowColor #455A64
skinparam ArrowThickness 2

skinparam class {
  BackgroundColor #F8FAFF
  BorderColor #1A4E89
  ArrowColor #1A4E89
  FontSize 12
  AttributeFontSize 10
  BorderThickness 2
}

skinparam interface {
  BackgroundColor #F0FFF8
  BorderColor #00897B
  BorderThickness 2
}

skinparam enum {
  BackgroundColor #FFF8E1
  BorderColor #FFB300
  BorderThickness 2
}

skinparam legend {
  BackgroundColor #FAFAFA
  BorderColor #BDBDBD
}

' Package & role stereotypes
skinparam package<<domain>> {
  BackgroundColor #E3F2FD
  BorderColor #1565C0
  FontColor #0D47A1
}

skinparam package<<persistence>> {
  BackgroundColor #FFF4E5
  BorderColor #EF6C00
  FontColor #E65100
}

skinparam package<<services>> {
  BackgroundColor #E8F5E9
  BorderColor #2E7D32
  FontColor #1B5E20
}

skinparam package<<web>> {
  BackgroundColor #F3E5F5
  BorderColor #7B1FA2
  FontColor #4A148C
}

skinparam package<<infra>> {
  BackgroundColor #ECEFF1
  BorderColor #607D8B
  FontColor #37474F
}

skinparam class<<implemented>> {
  BackgroundColor #E8F5E8
  BorderColor #2E7D32
  BorderThickness 3
  FontStyle bold
}

skinparam class<<planned>> {
  BackgroundColor #FFEBEE
  BorderColor #C62828
  BorderThickness 2
  FontStyle italic
}

skinparam interface<<implemented>> {
  BackgroundColor #E3F2FD
  BorderColor #1565C0
  BorderThickness 3
}

skinparam enum<<implemented>> {
  BackgroundColor #FFF8E1
  BorderColor #F9A825
  BorderThickness 2
}

' Package definitions
package "Model Layer" <<domain>> {
    class Room <<implemented>> {
        - id: Long
        - roomId: int
        - type: String
        - price: Double
        - isAvailable: Boolean
        - description: String
        - reservations: List<Reservation>
        --
        + Room()
        + Room(roomId, type, price, isAvailable, description)
        --
        ' Standard getters/setters
        --
        + addReservation(reservation: Reservation): void
        + removeReservation(reservation: Reservation): void
        + isAvailableForPeriod(checkIn: LocalDate, checkOut: LocalDate): boolean
    }
    
    class Reservation <<implemented>> {
        - id: Long
        - room: Room
        - customerName: String
        - checkInDate: LocalDate
        - checkOutDate: LocalDate
        - numberOfGuests: int
        - totalPrice: Double
        - status: ReservationStatus
        --
        + Reservation()
        + Reservation(room, customerName, checkInDate, checkOutDate, numberOfGuests)
        --
        ' Standard getters/setters
        --
        + getRoomType(): String
        + calculateTotalPrice(): Double
        + getDurationInDays(): long
        + isActive(): boolean
    }
    
    enum ReservationStatus <<implemented>> {
        PENDING
        CONFIRMED
        CHECKED_IN
        CHECKED_OUT
        CANCELLED
        --
        + getDisplayName(): String
        + isActive(): boolean
    }
    
    ' Horizontal positioning (model classes side-by-side)
    Room -[hidden]right- Reservation
    Reservation -[hidden]right- ReservationStatus
}

package "Repository Layer" <<persistence>> {
    interface RoomRepository <<implemented>> {
        + findAll(): List<Room>
        + findById(id: Long): Optional<Room>
        + save(room: Room): Room
        + deleteById(id: Long): void
        + findByType(type: String): List<Room>
        + findAvailableRoomsByType(type: String): List<Room>
    }
    
    interface ReservationRepository <<implemented>> {
        + findAll(): List<Reservation>
        + findById(id: Long): Optional<Reservation>
        + save(reservation: Reservation): Reservation
        + deleteById(id: Long): void
        + findByRoom(room: Room): List<Reservation>
        + findByStatus(status: ReservationStatus): List<Reservation>
        + findActiveReservationsForRoom(room: Room): List<Reservation>
    }
    
    ' Horizontal positioning
    RoomRepository -[hidden]right- ReservationRepository
}

package "Service Layer" <<services>> {
    class RoomService <<implemented>> {
        - roomRepository: RoomRepository
        - reservationService: ReservationService
        --
        + findAllRooms(): List<Room>
        + saveRoom(room: Room): Room
        + findAvailableRoomByType(type: String): Optional<Room>
        + isRoomAvailableForPeriod(roomId: Long, checkIn: LocalDate, checkOut: LocalDate): boolean
    }
    
    class ReservationService <<implemented>> {
        - reservationRepository: ReservationRepository
        - roomService: RoomService
        --
        + findAllReservations(): List<Reservation>
        + saveReservation(reservation: Reservation): Reservation
        + createReservation(roomType: String, customerName: String, checkIn: LocalDate, checkOut: LocalDate, guests: int): Reservation
        + validateReservation(reservation: Reservation): boolean
        + cancelReservation(id: Long): void
        + checkInReservation(id: Long): void
        + checkOutReservation(id: Long): void
    }
    
    ' Horizontal positioning for services  
    RoomService -[hidden]right- ReservationService
}

package "Controller Layer" <<web>> {
    class HomeController <<implemented>> {
        --
        + home(): String
        + about(): String
    }
    
    class RoomController <<implemented>> {
        - roomService: RoomService
        --
        + listRooms(model: Model): String
        + saveRoom(room: Room, ...): String
        + editRoom(id: Long, ...): String
        + deleteRoom(id: Long, ...): String
    }
    
    class ReservationController <<implemented>> {
        - reservationService: ReservationService
        - roomService: RoomService
        --
        + listReservations(model: Model): String
        + saveReservation(roomType: String, customerName: String, ...): String
        + editReservation(id: Long, ...): String
        + cancelReservation(id: Long, ...): String
        + checkInReservation(id: Long, ...): String
        + checkOutReservation(id: Long, ...): String
    }
    
    ' Horizontal positioning for controllers
    HomeController -[hidden]right- RoomController
    RoomController -[hidden]right- ReservationController
}

package "Database" <<infra>> {
    class H2Database <<Database>> {
        + rooms: Table
        + reservations: Table
        --
    + Foreign Key: reservations.room_id -> rooms.id
    }
}

' ===============================
' RELATIONSHIPS & FLOW DIAGRAM
' ===============================

' Package horizontal flow (leftâ†’right)
"Model Layer" -[hidden]right- "Repository Layer"
"Repository Layer" -[hidden]right- "Service Layer"
"Service Layer" -[hidden]right- "Controller Layer"
"Controller Layer" -[hidden]right- "Database"

' =============================
' ENTITY RELATIONSHIPS (Bidirectional OOP)
' =============================
Room ||--o{ Reservation : "room (OneToMany)"
Reservation --> ReservationStatus : "status (enum)"

' =============================
' DATA ACCESS RELATIONSHIPS  
' =============================
RoomRepository ..> Room : "CRUD Operations"
ReservationRepository ..> Reservation : "CRUD Operations"

' =============================
' SERVICE DEPENDENCIES (Cross-Service Integration)
' =============================
RoomService --> RoomRepository : "Data Access"
RoomService --> ReservationService : "Business Logic Integration"
ReservationService --> ReservationRepository : "Data Access"
ReservationService --> RoomService : "Room Availability Validation"

' =============================
' CONTROLLER DEPENDENCIES
' =============================
RoomController --> RoomService : "Business Logic"
ReservationController --> ReservationService : "Primary Service"
ReservationController --> RoomService : "Room Selection"

legend right
| Stereotype / Color | Meaning |
| <<domain>> | Domain entities & enums |
| <<persistence>> | Spring Data repositories |
| <<services>> | Business logic / orchestration |
| <<web>> | MVC / REST controllers |
| <<infra>> | Infrastructure / database |
| <<implemented>> | Implemented component |
| <<planned>> | Planned / pending |
endlegend

@enduml
